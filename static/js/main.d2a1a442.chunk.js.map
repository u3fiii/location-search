{"version":3,"sources":["ProvList.js","CityList.js","DistList.js","FilteredArray.js","App.js","serviceWorker.js","index.js"],"names":["ProvList","props","className","provinces","map","province","id","provinceID","onClick","openProvince","name","CityList","cities","city","cityID","openCity","DistList","districts","district","districtID","FilteredArray","matchedWords","word","App","getSerp","e","preventDefault","currentSearch","state","fetch","then","response","json","data","setState","listings","console","log","updataInput","target","value","filteredArray","allNames","filter","regex","RegExp","match","currentStep","theCity","handleBack","citiesPush","reduce","r","push","allCities","distPush","dists","allDists","mergeArrays","allProvs","mergedArray","concat","openLocation","handleSubmit","componentDidMount","locationsData","locationOpen","isLoading","bind","onSubmit","this","onChange","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d2a1a442.chunk.js","sourcesContent":["import React from 'react'\nimport {AnimateOnChange} from 'react-animation';\nimport './App.css';\n\nconst ProvList = (props) => {\n    return (\n        <div className=\"ProvList\">\n            \n            {props.provinces.map(province => (\n                <div \n                    id={province.provinceID} \n                    onClick={props.openProvince}\n                    className=\"province\"\n                >{province.name}</div>\n            ))}\n        \n        </div>\n    )\n}\n\nexport default ProvList;\n\n","import React from 'react'\nimport './App.css';\n\nconst CityList = (props) => {\n    return (\n        <div className=\"CityList\">\n            {props.cities.map(city => (\n                <div id={city.cityID} onClick={props.openCity} className=\"city\">{city.name}</div>\n            ))}\n        </div>\n    )\n}\n\nexport default CityList;\n\n","import React from 'react'\nimport './App.css';\n\nconst DistList = (props) => {\n    return (\n        <div className=\"DistList\">\n            {props.districts.map(district => (\n                <div id={district.districtID} className=\"district\" >{district.name}</div>\n            ))}\n        </div>\n    )\n}\n\nexport default DistList;\n\n","import React from 'react'\n\nconst FilteredArray = (props) => {\n    return (\n        <div className=\"MatchedList\">\n            {props.matchedWords.map(word => (\n                <div\n                    className=\"matched\"\n                >{word.name}</div>\n            ))}\n        </div>\n    )\n}\n\nexport default FilteredArray;\n","import React, { Component } from 'react'\nimport './App.css';\n\nimport { AnimateOnChange } from 'react-animation';\n\nimport ProvList from './ProvList';\nimport CityList from './CityList';\nimport DistList from './DistList';\nimport FilteredArray from './FilteredArray';\n\n\n\n\n\nexport class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      locationOpen : false,\n      isLoading: '',\n      listings: [],\n      currentSearch: '',\n      provinces: [],\n      cities: [],\n      districts: [],\n      currentStep: 0,\n      allNames: [],\n      allCities : [],\n      allDists: [],\n      matchedWords: [],\n    }\n    this.getSerp = this.getSerp.bind(this);\n  }\n\n  getSerp = (e) => {\n    e.preventDefault();\n    const currentSearch = this.state.currentSearch;\n\n    fetch(`https://staging.mielse.com/api/v3.1.7/listings?locationType=1&locationID=301&searchTerm=${currentSearch}&o=1&withImage=1`)\n      .then(response => response.json())\n      .then(data => this.setState({listings: data.listings}))\n      .then(console.log(this.state.listings))\n      console.log('hellow');\n\n  }\n\n  updataInput = (e) => {\n    const currentSearch = e.target.value;\n    this.setState({currentSearch});\n\n    const allNames = this.state.allNames;\n\n    const filteredArray = allNames.filter(name => {\n      const regex = new RegExp(this.state.currentSearch, 'gi');\n      return name.name.match(regex);\n    })\n    \n    this.setState({matchedWords:filteredArray})\n  }\n\n  openProvince = (e) => {\n    const cities =this.state.provinces[e.target.id - 1 ].cities\n    this.setState({cities: cities, currentStep: 1});\n\n  }\n  \n  openCity = (e) => {\n    const theCity = this.state.cities.filter(city =>  city.cityID == e.target.id);\n    this.setState({districts:theCity[0].districts, currentStep: 2});\n    // const districts = this.state.cities[e.target.id - 1].districts;\n    // this.setState({districts})\n  }\n\n  handleBack = (e) => {\n    e.preventDefault();\n    const currentStep = this.state.currentStep;\n    this.setState({currentStep:currentStep -1 })\n  }\n\n  citiesPush = () => {\n    const provinces = this.state.provinces;\n    const cities = provinces.reduce((r, e) => (\n      r.push(...e.cities), r), []);\n    console.log(cities);\n    this.setState({allCities: cities});\n  }\n  distPush = () => {\n    const cities = this.state.allCities;\n    const dists = cities.reduce((r, e) => (\n      r.push(...e.districts), r), []);\n      this.setState({allDists: dists});\n    console.log('from distPush')\n  }\n\n  mergeArrays = () => {\n    const allCities = this.state.allCities;\n    const allDists = this.state.allDists;\n    const allProvs = this.state.provinces;\n    const mergedArray = allCities.concat(allDists, allProvs);\n    this.setState({allNames: mergedArray});\n  }\n\n  openLocation = () => {\n    this.setState({openLocation: true})\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const allNames = this.state.allNames;\n\n    const filteredArray = allNames.filter(name => {\n      const regex = new RegExp(this.state.currentSearch, 'gi');\n      return name.name.match(regex);\n    })\n    \n    this.setState({matchedWords:filteredArray})\n  }\n \n  componentDidMount = () => {\n      fetch(`https://staging.mielse.com/api/v5.2.0/general/static-data`)\n        .then(response => response.json())\n        .then(data => this.setState({provinces: data.locationsData}))\n        .then(this.citiesPush)\n        .then(this.distPush)\n        .then(this.mergeArrays);\n      \n  }\n\n\n\n  render() {\n\n    const List = () => {\n      if(this.state.currentStep == 0) {\n        return  <ProvList \n          provinces={this.state.provinces}\n          openProvince={this.openProvince}\n        /> \n      } else if (this.state.currentStep == 1) {\n        return <CityList \n          cities={this.state.cities}\n          openCity={this.openCity}\n        />\n      } else if (this.state.currentStep == 2 ) {\n        return <DistList districts={this.state.districts} />\n      }\n  }\n\n    return (\n      <div className=\"App\">\n          <form onSubmit={this.handleSubmit}>\n              <button className=\"searchButton\">Get Serp</button>\n              <input \n                value={this.state.currentSearch}\n                onChange={this.updataInput}\n              />\n              <button className=\"backButton\" onClick={this.handleBack}>Back</button>\n          </form>\n          \n          {\n            this.state.currentSearch == '' ? <List /> : <FilteredArray matchedWords={this.state.matchedWords} /> \n          }\n          \n      </div>\n\n      \n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}